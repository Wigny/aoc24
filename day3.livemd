<!-- vim: set syntax=markdown: -->

# Day 3

```elixir
Mix.install([
  {:kino, "~> 0.14"}
])
```

## Input

```elixir
input = Kino.Input.textarea("Insert the input:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir

```

## Part 1

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Mul do
  def sum(instructions) do
    ~r/mul\((?<a>\d{1,3}),(?<b>\d{1,3})\)/
    |> Regex.scan(instructions, capture: ~w[a b]a)
    |> Enum.map(fn mult ->
      mult
      |> Enum.map(&String.to_integer/1)
      |> Enum.product()
    end)
    |> Enum.sum()
  end
end

Mul.sum(Kino.Input.read(input))
```

## Part 2

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Instruction do
  def reject(instructions) do
    reject(instructions, [])
  end

  defp reject([], instructions) do
    instructions
  end

  defp reject(["do()", instruction | instructions], acc) do
    reject(instructions, [instruction | acc])
  end

  defp reject(["don't()", "do()", instruction | instructions], acc) do
    reject(instructions, [instruction | acc])
  end

  defp reject(["don't()", _instruction | instructions], acc) do
    reject(["don't()" | instructions], acc)
  end

  defp reject([instruction | instructions], acc) do
    reject(instructions, [instruction | acc])
  end
end

~r/mul\(\d{1,3},\d{1,3}\)|do\(\)|don't\(\)/
|> Regex.scan(Kino.Input.read(input))
|> List.flatten()
|> Instruction.reject()
|> Enum.join()
|> Mul.sum()
```
